let Joi,REFRESH_SECRET,RefreshToken,User,CustomErrorHandler,JWtService;_bda‍.x([["default",()=>_bda‍.o]]);_bda‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_bda‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);_bda‍.w("../../Models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_bda‍.w("../../Services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_bda‍.w("../../Services/JwtService",[["default",["JWtService"],function(v){JWtService=v}]]);





const refreshController = {
  async refresh(req, res, next) {
    const refreshSchema = Joi.object({
      refresh_token: Joi.string().required(),
    });
    const { error } = refreshSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    let refreshtoken;

    try {
      refreshtoken = await RefreshToken.findOne({
        token: req.body.refresh_token,
      });

      if (!refreshtoken) {
        return next(CustomErrorHandler.unAuthorized("invalid refresh token"));
      }

      let userId;
      try {
        const { _id } = await JWtService.verify(
          refreshtoken.token,
          REFRESH_SECRET
        );
        userId = _id;
      } catch (err) {
        return next(CustomErrorHandler.unAuthorized("invalid refresh token"));
      }
      const user = await User.findOne({ _id: userId });

      if(!user){
        return next(CustomErrorHandler.unAuthorized("No user found"));

      }
        const  acces_token = JWtService.sign({ _id: user._id, role: user.role });
          const refresh_token = JWtService.sign({ _id: user._id, role: user.role }, '1y', REFRESH_SECRET);

          await RefreshToken.create({ token: refresh_token });
           
          res.json({acces_token: acces_token,refresh_token: refresh_token});

    } catch (err) {
      return next(new Error(" somthing went wrong " + err.message));
    }
  },
};

_bda‍.d(refreshController);
