let Joi,RefreshToken,User,CustomErrorHandler,bcrypt,JWtService,REFRESH_SECRET;_88a‍.x([["default",()=>_88a‍.o]]);_88a‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_88a‍.w("../../Models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_88a‍.w("../../Services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_88a‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_88a‍.w("../../Services/JwtService",[["default",["JWtService"],function(v){JWtService=v}]]);_88a‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);







const loginController = {

    async login(req, res , next){

        const loginSchema = Joi.object({
         email: Joi.string().email().required(),
         password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required()

        });
        const {error } = loginSchema.validate(req.body);

        if(error){
            return next(error);
        }
        
        try{
            const user = await User.findOne({ email: req.body.email })
            if(!user){
                return next(CustomErrorHandler.wrongcredentials());
            }
            const match = await bcrypt.compare(req.body.password, user.password);
            if(!match){
                return next(CustomErrorHandler.wrongcredentials());

            }
          const  acces_token = JWtService.sign({ _id: user._id, role: user.role });
          const refresh_token = JWtService.sign({ _id: user._id, role: user.role }, '1y', REFRESH_SECRET);

          await RefreshToken.create({ token: refresh_token });
           
          res.json({acces_token: acces_token,refresh_token: refresh_token});


        }catch(err){
            return next(err)

        }
    },

    async logout (req, res, next){

        const refreshSchema = Joi.object({
            refresh_token: Joi.string().required(),
          });
          const { error } = refreshSchema.validate(req.body);
      
          if (error) {
            return next(error);
          }
        try{
            await RefreshToken.deleteOne({token: req.body.refresh_token});

        }catch(err){
            return next(new Error('Something went wrong in the database'));
        }
        res.json({status: 1});

    }

};

_88a‍.d(loginController);